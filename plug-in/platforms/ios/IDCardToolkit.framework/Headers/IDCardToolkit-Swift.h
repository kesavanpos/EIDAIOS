#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <IDCardToolkit/IDCardToolkit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IDCardToolkit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC13IDCardToolkit20ToolkitXmlDataObject")
@interface ToolkitXmlDataObject : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13IDCardToolkit15AllergyResource")
@interface AllergyResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)allergyResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAllergyDisplay SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAllergyRecordedDate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit18BloodGroupResource")
@interface BloodGroupResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)bloodGroupResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBloodGroup SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRecordedDate SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC13IDCardToolkit15ToolkitResponse")
@interface ToolkitResponse : ToolkitXmlDataObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initWithToolkitResponseByte:(uint8_t * _Null_unspecified)detachedSignature detachedSignatureLength:(uint32_t)detachedSignatureLength SWIFT_METHOD_FAMILY(none);
- (void)initWithToolkitResponse:(NSString * _Nonnull)xmlString detachedSignature:(uint8_t * _Null_unspecified)detachedSignature detachedSignatureLength:(uint32_t)detachedSignatureLength SWIFT_METHOD_FAMILY(none);
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResponseStatus SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)getResponseDataElement SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStatus SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getService SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAction SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRequestId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNonce SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCorrelationId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardSerialNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTimeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getValidityInterval SWIFT_WARN_UNUSED_RESULT;
- (uint8_t * _Null_unspecified)getDetachedSignature SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getDetachedSignatureLength SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit16CardCertificates")
@interface CardCertificates : ToolkitResponse
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getAuthenticationCertificate SWIFT_WARN_UNUSED_RESULT;
- (uint8_t * _Null_unspecified)getSigningCertificate SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getAuthenticationCertificateLength SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getSigningCertificateLength SWIFT_WARN_UNUSED_RESULT;
@end

@class HeadOfFamily;
@class NSArray;

SWIFT_CLASS("_TtC13IDCardToolkit18CardFamilyBookData")
@interface CardFamilyBookData : ToolkitResponse
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (HeadOfFamily * _Nullable)getHeadOfFamily SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getWives SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getChildren SWIFT_WARN_UNUSED_RESULT;
@end

@class ModifiablePublicData;
@class NonModifiablePublicData;
@class HomeAddress;
@class WorkAddress;

SWIFT_CLASS("_TtC13IDCardToolkit14CardPublicData")
@interface CardPublicData : ToolkitResponse
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getCardHolderPhoto SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getCardHolderPhotoLength SWIFT_WARN_UNUSED_RESULT;
- (uint8_t * _Null_unspecified)getHolderSignatureImage SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getHolderSignatureImageLength SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardNumber SWIFT_WARN_UNUSED_RESULT;
- (ModifiablePublicData * _Nullable)getModifiablePublicData SWIFT_WARN_UNUSED_RESULT;
- (NonModifiablePublicData * _Nullable)getNonModifiablePublicData SWIFT_WARN_UNUSED_RESULT;
- (HomeAddress * _Nullable)getHomeAddress SWIFT_WARN_UNUSED_RESULT;
- (WorkAddress * _Nullable)getWorkAddress SWIFT_WARN_UNUSED_RESULT;
@end

@class SignatureResponse;
enum FingerIndex : NSInteger;
@class FingerData;
@class DataContainer;

SWIFT_CLASS("_TtC13IDCardToolkit10CardReader")
@interface CardReader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <summary>
/// Provides all methods required to perform operations with Emirates ID Card after
/// successful connect operation with the provided CardReader class
/// </summary>
- (nullable instancetype)initWithCardReaderName:(NSString * _Nonnull)cardReaderName error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// <summary>
/// Returns name of the card reader
/// </summary>
- (NSString * _Nonnull)getName SWIFT_WARN_UNUSED_RESULT;
/// Check whether the smartcard is connected with the reader or not
/// </summary>
/// <returns>true if connected else false</returns>
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Establish connection to the smartcard in the specific reader identified
/// by the reader name
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)connectAndReturnError:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Disconnect the connected reader
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)disconnectAndReturnError:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Set parameters for authenticating with Emirates ID Card while accessing
/// through NFC interface
/// </summary>
/// <param name="mrzData">
/// Scanned Machine Readable Zone (MRZ) data that is present on the back side
/// of the ID Card
/// </param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)setNfcAuthenticationParameters:(NSString * _Nonnull)mrzdata error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Set parameters for authenticating with Emirates ID Card while accessing
/// through NFC interface
/// </summary>
/// <param name="cardNumber">Card Number of the Emirates ID Card holder</param>
/// <param name="dateOfBirth">Date of birth of Emirates ID Card holder</param>
/// <param name="expiryDate">Expiry date of Emirates ID Card</param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)setNfcAuthenticationParameters:(NSString * _Nonnull)cardNumber dateOfBirth:(NSString * _Nonnull)dateOfBirth expiryDate:(NSString * _Nonnull)expiryDate error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Performs the Emirates ID Card validation with the help of
/// ICA Validation Gateway (VG) service
/// </summary>
/// <param name="requestId">Application random number</param>
/// <returns>
/// ToolkitResponse object which contains status of the
/// inserted Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)checkCardStatus:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Retrieve data stored on the public areas of the Emirates ID Card
/// </summary>
/// <param name="requestId">Application random number</param>
/// <param name="readNonModifiableData">
/// Flag to read non modifiable data from the card
/// </param>
/// <param name="readModifiableData">
/// Flag to read modifiable data from the card
/// </param>
/// <param name="readPhotography">
/// Flag to read photo data from the card
/// </param>
/// <param name="readSignatureImage">
/// Flag to read hand written signature image from the card
/// </param>
/// <param name="readAddress">
/// Flag to read home and work address from the card
/// </param>
/// <returns>
/// CardPublicData object which contains requested public data retrieved
/// from the inserted Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardPublicData * _Nullable)readPublicData:(NSString * _Nonnull)requestId readNonModifiableData:(BOOL)readNonModifiableData readModifiableData:(BOOL)readModifiableData readPhotography:(BOOL)readPhotography readSignatueImage:(BOOL)readSignatueImage readAddress:(BOOL)readAddress error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Prepares Toolkit service request for subsequent Toolkit service functions
/// in CardReader class
/// </summary>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// string which contains 8-byte request handle in base64 encoded format
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)prepareRequest:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Reads the authentication and digital signature certificates
/// from the Emirates ID Card
/// </summary>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>
/// CardCertificates object which contains authentication and
/// digital signature certificates retrieved from the inserted Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardCertificates * _Nullable)getPkiCertificates:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Authenticate the Emirates ID Card holder’s PKI Pin
/// and validates the authentication certificate status using
/// Validation Gateway (VG) Service
/// </summary>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>
/// ToolkitResponse object which contains the PKI authentication status
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)authenticatePki:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Sign plain data or hash using digital signature certificate from the
/// Emirates ID Card
/// </summary>
/// <param name="input">Plain data or hash to digitally sign</param>
/// <param name="isInputHash">
/// true if input is hash data/false if input is plain data
/// </param>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>SignatureResponse object which contains Signature</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (SignatureResponse * _Nullable)signData:(NSString * _Nonnull)input inputLength:(uint32_t)inputLength isInputHash:(BOOL)isInputHash encodedPin:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Digitally sign challenge or hash using authentication certificate from the
/// Emirates ID Card
/// </summary>
/// <param name="input">
/// Challenge bytes to digitally sign
/// </param>
/// <param name="isInputHash">
/// true if input is hash data/false if input is plain data
/// </param>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>SignatureResponse object which contains Signature</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (SignatureResponse * _Nullable)signChallenge:(NSString * _Nonnull)input inputLength:(uint32_t)inputLength isInputHash:(BOOL)isInputHash encodedPin:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get Finger index along with finger reference identifiers of the
/// fingerprints stored in the Emirates ID Card
/// </summary>
/// <returns>
/// Array of FingerData object which contains biometric authentication reference
/// identifiers and its corresponding finger index values of the inserted
/// Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSArray * _Nullable)getFingerDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Performs Biometric authentication with Validation Gateway (VG) service
/// </summary>
/// <param name="requestId">Application random number</param>
/// <param name="fingerIndex">
/// Index of finger to be used for biometric authentication
/// </param>
/// <param name="sensorTimeout">
/// Timeout of capture for fingerprint sensor in number of seconds
/// </param>
/// <returns>
/// ToolkitResponse object which contains the biometric authentication status
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)authenticateBiometricOnServer:(NSString * _Nonnull)requestId fingerIndex:(enum FingerIndex)fingerIndex sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Resets the ID card PIN using the ICA Validation Gateway (VG) service
/// </summary>
/// <param name="encodedPin">
/// Emirates ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <param name="fingerData">
/// FingerData object referring to finger reference identifier and index values
/// </param>
/// <param name="sensorTimeout">
/// Timeout in number of seconds for sensor to capture the finger image
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)resetPin:(NSString * _Nonnull)encodedPin fingerData:(FingerData * _Nullable)fingerData sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Unblock the ID Card PIN, if the card is blocked after multiple unsuccessful PIN authentications
/// </summary>
/// <param name="encodedPin">
/// Emirates ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <param name="fingerData">
/// FingerData object referring to finger reference identifier and index values
/// </param>
/// <param name="sensorTimeout">
/// Timeout in number of seconds for sensor to capture the finger image
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)unblockPin:(NSString * _Nonnull)encodedPin fingerData:(FingerData * _Nullable)fingerData sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Read the family book data from the Emirates ID Card
/// </summary>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>
/// CardFamilyBookData object which contains the Family Book data fields
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardFamilyBookData * _Nullable)readFamilyBookData:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Verify digital signature of input data with the corresponding certificate
/// </summary>
/// <param name="input">
/// Data or hash corresponding to the digital signature to be verified
/// </param>
/// <param name="isInputHash">
/// true if input is hash data/false if input is plain data
/// </param>
/// <param name="signature">Buffer containing digital signature</param>
/// <param name="certificate">
/// Certificate data corresponding to the signature verification
/// </param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)verifySignature:(NSString * _Nonnull)input inputLength:(uint32_t)inputLength isInputHash:(BOOL)isInputHash signature:(uint8_t * _Null_unspecified)signature signatureLength:(uint32_t)signatureLength certificate:(uint8_t * _Null_unspecified)certificate certificateLength:(uint32_t)certificateLength error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Get the Card communication interface type
/// </summary>
/// <returns>Card communication interface type</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getInterfaceTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Validates Emirates ID card and performs biometric authentication with
/// Validation Gateway (VG) service against the captured finger image.
/// </summary>
/// <param name="requestId">Application random number</param>
/// <param name="fingerIndex">
/// Index of finger to be used for biometric authentication
/// </param>
/// <param name="sensorTimeout">
/// Timeout of capture for fingerprint sensor in number of seconds
/// </param>
/// <returns>
/// ToolkitResponse object which contains the biometric authentication status
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)authenticateCardAndBiometric:(NSString * _Nonnull)requestId fingerIndex:(enum FingerIndex)fingerIndex sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Retrieve Elementary File data stored on the public areas of the ID card
/// </summary>
/// <param name="publicDataEFType">
/// Enumeration value corresponding to the Elementary File to be read
/// </param>
/// <param name="validateSignature">
/// A value of TRUE indicates that the application wants to validate the
/// digital signature of the read Elementary file, FALSE otherwise
/// </param>
/// <returns>
/// Elementary File Data as byte array
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)readPublicDataEF:(PUBLIC_DATA_EF_TYPE)publicDataEFType validateSignature:(int32_t)validateSignature error:(NSError * _Nullable * _Nullable)error;
- (uint8_t * _Null_unspecified)getreadPublicDataEFByte SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getreadPublicDataEFLength SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Retrieve the serial number of the Emirates ID Card
/// </summary>
/// <returns>
/// string which contains Emirates ID Card serial number
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getCSNAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Update container data to card
/// </summary>
/// <param name="fileType">
/// Type of file to update
/// </param>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)updateData:(FILE_TYPE)fileType requestId:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Read container data from card
/// </summary>
/// <param name="fileType">
/// Type of file to update
/// </param>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (DataContainer * _Nullable)readData:(FILE_TYPE)fileType requestId:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit5Child")
@interface Child : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)ChildElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getChildIdn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfBirth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherIdn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
@end

@class HealthDataContainer;

SWIFT_CLASS("_TtC13IDCardToolkit13DataContainer")
@interface DataContainer : ToolkitResponse
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (HealthDataContainer * _Nullable)getHealthDataContainer SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit17DataProtectionKey")
@interface DataProtectionKey : NSObject
- (nonnull instancetype)init:(uint8_t * _Nullable)publicKey keyLength:(uint32_t)keyLength modulus:(NSString * _Nonnull)modulus modulusLength:(uint32_t)modulusLength exponent:(NSString * _Nonnull)exponent exponentLength:(uint32_t)exponentLength OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getPublicKey SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getKeyLength SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getModulus SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getModulusLength SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getExponent SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getExponentLength SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit17DiagnosisResource")
@interface DiagnosisResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)diagnosisResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDiagnosisCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDiagnosisDescription SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDiagnosisRecordedDate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit10FingerData")
@interface FingerData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSInteger)fingerId fingerIndex:(NSInteger)fingerIndex OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)getFingerId SWIFT_WARN_UNUSED_RESULT;
- (enum FingerIndex)getFingerIndex SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, FingerIndex, closed) {
  FingerIndexNone = 0,
  FingerIndexNoMeaning = 3,
  FingerIndexRightThumb = 5,
  FingerIndexRightIndex = 9,
  FingerIndexRightMiddle = 13,
  FingerIndexRightRing = 17,
  FingerIndexRightLittle = 15,
  FingerIndexLeftThumb = 6,
  FingerIndexLeftIndex = 10,
  FingerIndexLeftMiddle = 14,
  FingerIndexLeftRing = 18,
  FingerIndexLeftLittle = 22,
};


SWIFT_CLASS("_TtC13IDCardToolkit12HeadOfFamily")
@interface HeadOfFamily : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)headOfFamily OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getHolderIdNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFamilyId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmirateNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmirateNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFatherNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFatherNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGrandFatherNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGrandFatherNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTribeArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTribeEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getClanArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getClanEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfBirth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class InsuranceResource;

SWIFT_CLASS("_TtC13IDCardToolkit19HealthDataContainer")
@interface HealthDataContainer : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(id _Nonnull)healthData OBJC_DESIGNATED_INITIALIZER;
- (NSArray * _Nonnull)getAllergyResource SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getDiagnosisResource SWIFT_WARN_UNUSED_RESULT;
- (BloodGroupResource * _Nullable)getBloodGroupResource SWIFT_WARN_UNUSED_RESULT;
- (InsuranceResource * _Nullable)getInsuranceResource SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOrganDonor SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit11HomeAddress")
@interface HomeAddress : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)homeAddressDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getAddressTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLocationCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPobox SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFlatNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLandPhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMobilePhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmail SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit17InsuranceResource")
@interface InsuranceResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)insuranceResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceValidityStartDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceValidityEndDate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit20ModifiablePublicData")
@interface ModifiablePublicData : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)modifiableDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getOccupationCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFamilyId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationTypeArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationTypeEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationFieldCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMaritalStatusCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getHusbandIdnNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getSponsorTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getSponsorUnifiedNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getSponsorName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResidencyTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResidencyNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResidencyExpiryDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportCountryCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportCountryArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportCountryEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportIssueDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportExpiryDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQualificationLevelCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQualificationLevelArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQualificationLevelEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDegreeDescArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDegreeDescEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFieldOfStudyCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFieldOfStudyArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFieldOfStudyEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfStudyArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfStudyEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfGraduation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit23NonModifiablePublicData")
@interface NonModifiablePublicData : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)nonModifiableDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getIDType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIssueDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getExpiryDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTitleArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTitleEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfBirth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthEnglish SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit22RegisterDeviceResponse")
@interface RegisterDeviceResponse : ToolkitResponse
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getDeviceRegistrationId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit17SignatureResponse")
@interface SignatureResponse : ToolkitResponse
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getSignature SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getSignatureLength SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit18SignatureValidator")
@interface SignatureValidator : NSObject
- (nullable instancetype)init:(uint8_t * _Null_unspecified)certificateData certificateDataLength:(uint32_t)certificateDataLength certificateChain:(uint8_t * _Null_unspecified)certificateChain certificateChainLength:(uint32_t)certificateChainLength error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)ValidateToolkitResponse:(NSString * _Nonnull)toolkitResponse error:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nonnull)getService SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAction SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRequest_id SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNonce SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCorrelation_id SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCsn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTime_stamp SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getValidity_interval SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit7Toolkit")
@interface Toolkit : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Toolkit constructor initializes the Toolkit context and prepares the SDK for use
/// </summary>
/// <param name="inProcessMode">
/// If this flag is true, the Toolkit will fulfill the API/Service
/// requests within the library itself.
/// If the flag is false then the Toolkit shared library in the
/// application process will forward the API/Service requests to
/// Toolkit Agent running in the same system where the application is running
/// </param>
/// <param name="configParams">
/// Application specific configuration parameters
/// </param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (nullable instancetype)init:(BOOL)inProcessMode configParams:(NSString * _Nonnull)configParams error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// <summary>
/// Get the version of ICA’s Toolkit being used
/// </summary>
/// <returns>
/// Toolkit version in the format of major.minor.patch version
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getToolkitVersionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Prepares Toolkit service request for RegisterDevice service
/// </summary>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// string which contains 8-byte request handle in base64 encoded format
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)prepareRequest:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Registers a device with Validation Gateway(VG)
/// against the Service Provider(SP) license
/// </summary>
/// <param name="encodedUserId">
/// User ID of an authorized Service Provider (SP) encrypted and base64 encoded
/// </param>
/// <param name="encodedPassword">
/// Password for the userId encrypted and base64 encoded
/// </param>
/// <param name="deviceReferenceId">
/// Registration reference Identifier of the device to be registered with
/// validation gateway
/// </param>
/// <returns>
/// RegisterDeviceResponse object which
/// contains Device Registration Identifier of the registered device
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (RegisterDeviceResponse * _Nullable)registerDevice:(NSString * _Nonnull)encodedUserId encodedPassword:(NSString * _Nonnull)encodedPassword deviceReferenceId:(NSString * _Nonnull)deviceReferenceId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// List all compatible smart card readers connected to the system
/// </summary>
/// <returns>
/// Array of CardReader object of connected smartcard readers.
/// If no readers available, will return an empty array object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSArray * _Nullable)listReadersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get the first reader with Emirates ID Card inserted
/// </summary>
/// <returns>
/// CardReader object of card reader with Emirates ID Card inserted
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardReader * _Nullable)getReaderWithEmiratesIdAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get the Device Identifier of the connected device to register with
/// Validation Gateway
/// </summary>
/// <returns>
/// string which contains Device Identifier
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getDeviceIdAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get the status message corresponsing to the Toolkit status code
/// </summary>
/// <param name="status">Toolkit status code</param>
/// <returns>Status message</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getstatusMessage:(NSInteger)statusValue error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Free the memory buffer allocated
/// </summary>
/// <param name="buffer">Memory buffer to free</param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)freeMemory:(void * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Release the resources and close the Toolkit context
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)cleanupAndReturnError:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// setNfc tags
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)setNfcTag:(id _Nullable)session tag:(id _Nullable)tag error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Get data protection key
/// </summary>
/// <returns>
/// Data protection key object which contains public key, modulus, exponent
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (DataProtectionKey * _Nullable)getDataProtectionKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Parse the provided MRZ (Machine Readable Zone) string and
/// retrieves the attributes corresponding to the MRZ data provided
/// </summary>
/// <param name="mrz">MRZ string to be parsed</param>
/// <returns>
/// MRZData structure object which contains parsed attributes.
/// Parsed MRZ attributes can be accessed through the MRZData structure object.
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)parseMRZData:(NSString * _Nonnull)mrz error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Get the expiry date of the Toolkit SDK License issued to the service provider
/// </summary>
/// <returns>
/// string which contains expiry date of the Toolkit SDK License
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getLicenseExpiryDateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzDocument_type SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzIssued_country SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzCardnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzIdnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzDate_of_birth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzCard_expiry_date SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzNationality SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzFullname SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get config certificate expiry date
/// </summary>
/// <returns>
/// Config Cert Expiry Date structure object which holds the
/// expiry dates of the service provider
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)getConfigCertificateExpiryDateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nonnull)getConfig_vg_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getConfig_lv_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getServer_tls_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getConfig_ag_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLicense_expiry SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;

SWIFT_CLASS("_TtC13IDCardToolkit12ToolkitError")
@interface ToolkitError : NSError
+ (BOOL)errorWithDomainNameWithDomain:(NSString * _Nonnull)domain reason:(NSString * _Nonnull)reason code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithNameWithErrorName:(NSString * _Nonnull)errorName code:(NSInteger)code error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)foundexception:(NSError * _Nonnull)err error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorCode:(NSInteger)code error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode response:(NSString * _Nonnull)response error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode attemptsLeft:(int8_t)attemptsLeft error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode attemptsLeft:(int8_t)attemptsLeft response:(NSString * _Nonnull)response error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC13IDCardToolkit4Wife")
@interface Wife : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)wifeData OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getWifeIdn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityEnglish SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit11WorkAddress")
@interface WorkAddress : NSObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)workAddressDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getAddressTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLocationCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPoBox SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLandPhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMobilePhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmail SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <IDCardToolkit/IDCardToolkit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IDCardToolkit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC13IDCardToolkit20ToolkitXmlDataObject")
@interface ToolkitXmlDataObject : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13IDCardToolkit15AllergyResource")
@interface AllergyResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)allergyResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAllergyDisplay SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAllergyRecordedDate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit18BloodGroupResource")
@interface BloodGroupResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)bloodGroupResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBloodGroup SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRecordedDate SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC13IDCardToolkit15ToolkitResponse")
@interface ToolkitResponse : ToolkitXmlDataObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initWithToolkitResponseByte:(uint8_t * _Null_unspecified)detachedSignature detachedSignatureLength:(uint32_t)detachedSignatureLength SWIFT_METHOD_FAMILY(none);
- (void)initWithToolkitResponse:(NSString * _Nonnull)xmlString detachedSignature:(uint8_t * _Null_unspecified)detachedSignature detachedSignatureLength:(uint32_t)detachedSignatureLength SWIFT_METHOD_FAMILY(none);
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResponseStatus SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)getResponseDataElement SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStatus SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getService SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAction SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRequestId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNonce SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCorrelationId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardSerialNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTimeStamp SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getValidityInterval SWIFT_WARN_UNUSED_RESULT;
- (uint8_t * _Null_unspecified)getDetachedSignature SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getDetachedSignatureLength SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit16CardCertificates")
@interface CardCertificates : ToolkitResponse
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getAuthenticationCertificate SWIFT_WARN_UNUSED_RESULT;
- (uint8_t * _Null_unspecified)getSigningCertificate SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getAuthenticationCertificateLength SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getSigningCertificateLength SWIFT_WARN_UNUSED_RESULT;
@end

@class HeadOfFamily;
@class NSArray;

SWIFT_CLASS("_TtC13IDCardToolkit18CardFamilyBookData")
@interface CardFamilyBookData : ToolkitResponse
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (HeadOfFamily * _Nullable)getHeadOfFamily SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getWives SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getChildren SWIFT_WARN_UNUSED_RESULT;
@end

@class ModifiablePublicData;
@class NonModifiablePublicData;
@class HomeAddress;
@class WorkAddress;

SWIFT_CLASS("_TtC13IDCardToolkit14CardPublicData")
@interface CardPublicData : ToolkitResponse
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getCardHolderPhoto SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getCardHolderPhotoLength SWIFT_WARN_UNUSED_RESULT;
- (uint8_t * _Null_unspecified)getHolderSignatureImage SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getHolderSignatureImageLength SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardNumber SWIFT_WARN_UNUSED_RESULT;
- (ModifiablePublicData * _Nullable)getModifiablePublicData SWIFT_WARN_UNUSED_RESULT;
- (NonModifiablePublicData * _Nullable)getNonModifiablePublicData SWIFT_WARN_UNUSED_RESULT;
- (HomeAddress * _Nullable)getHomeAddress SWIFT_WARN_UNUSED_RESULT;
- (WorkAddress * _Nullable)getWorkAddress SWIFT_WARN_UNUSED_RESULT;
@end

@class SignatureResponse;
enum FingerIndex : NSInteger;
@class FingerData;
@class DataContainer;

SWIFT_CLASS("_TtC13IDCardToolkit10CardReader")
@interface CardReader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <summary>
/// Provides all methods required to perform operations with Emirates ID Card after
/// successful connect operation with the provided CardReader class
/// </summary>
- (nullable instancetype)initWithCardReaderName:(NSString * _Nonnull)cardReaderName error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// <summary>
/// Returns name of the card reader
/// </summary>
- (NSString * _Nonnull)getName SWIFT_WARN_UNUSED_RESULT;
/// Check whether the smartcard is connected with the reader or not
/// </summary>
/// <returns>true if connected else false</returns>
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Establish connection to the smartcard in the specific reader identified
/// by the reader name
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)connectAndReturnError:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Disconnect the connected reader
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)disconnectAndReturnError:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Set parameters for authenticating with Emirates ID Card while accessing
/// through NFC interface
/// </summary>
/// <param name="mrzData">
/// Scanned Machine Readable Zone (MRZ) data that is present on the back side
/// of the ID Card
/// </param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)setNfcAuthenticationParameters:(NSString * _Nonnull)mrzdata error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Set parameters for authenticating with Emirates ID Card while accessing
/// through NFC interface
/// </summary>
/// <param name="cardNumber">Card Number of the Emirates ID Card holder</param>
/// <param name="dateOfBirth">Date of birth of Emirates ID Card holder</param>
/// <param name="expiryDate">Expiry date of Emirates ID Card</param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)setNfcAuthenticationParameters:(NSString * _Nonnull)cardNumber dateOfBirth:(NSString * _Nonnull)dateOfBirth expiryDate:(NSString * _Nonnull)expiryDate error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Performs the Emirates ID Card validation with the help of
/// ICA Validation Gateway (VG) service
/// </summary>
/// <param name="requestId">Application random number</param>
/// <returns>
/// ToolkitResponse object which contains status of the
/// inserted Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)checkCardStatus:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Retrieve data stored on the public areas of the Emirates ID Card
/// </summary>
/// <param name="requestId">Application random number</param>
/// <param name="readNonModifiableData">
/// Flag to read non modifiable data from the card
/// </param>
/// <param name="readModifiableData">
/// Flag to read modifiable data from the card
/// </param>
/// <param name="readPhotography">
/// Flag to read photo data from the card
/// </param>
/// <param name="readSignatureImage">
/// Flag to read hand written signature image from the card
/// </param>
/// <param name="readAddress">
/// Flag to read home and work address from the card
/// </param>
/// <returns>
/// CardPublicData object which contains requested public data retrieved
/// from the inserted Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardPublicData * _Nullable)readPublicData:(NSString * _Nonnull)requestId readNonModifiableData:(BOOL)readNonModifiableData readModifiableData:(BOOL)readModifiableData readPhotography:(BOOL)readPhotography readSignatueImage:(BOOL)readSignatueImage readAddress:(BOOL)readAddress error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Prepares Toolkit service request for subsequent Toolkit service functions
/// in CardReader class
/// </summary>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// string which contains 8-byte request handle in base64 encoded format
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)prepareRequest:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Reads the authentication and digital signature certificates
/// from the Emirates ID Card
/// </summary>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>
/// CardCertificates object which contains authentication and
/// digital signature certificates retrieved from the inserted Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardCertificates * _Nullable)getPkiCertificates:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Authenticate the Emirates ID Card holder’s PKI Pin
/// and validates the authentication certificate status using
/// Validation Gateway (VG) Service
/// </summary>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>
/// ToolkitResponse object which contains the PKI authentication status
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)authenticatePki:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Sign plain data or hash using digital signature certificate from the
/// Emirates ID Card
/// </summary>
/// <param name="input">Plain data or hash to digitally sign</param>
/// <param name="isInputHash">
/// true if input is hash data/false if input is plain data
/// </param>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>SignatureResponse object which contains Signature</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (SignatureResponse * _Nullable)signData:(NSString * _Nonnull)input inputLength:(uint32_t)inputLength isInputHash:(BOOL)isInputHash encodedPin:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Digitally sign challenge or hash using authentication certificate from the
/// Emirates ID Card
/// </summary>
/// <param name="input">
/// Challenge bytes to digitally sign
/// </param>
/// <param name="isInputHash">
/// true if input is hash data/false if input is plain data
/// </param>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>SignatureResponse object which contains Signature</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (SignatureResponse * _Nullable)signChallenge:(NSString * _Nonnull)input inputLength:(uint32_t)inputLength isInputHash:(BOOL)isInputHash encodedPin:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get Finger index along with finger reference identifiers of the
/// fingerprints stored in the Emirates ID Card
/// </summary>
/// <returns>
/// Array of FingerData object which contains biometric authentication reference
/// identifiers and its corresponding finger index values of the inserted
/// Emirates ID Card
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSArray * _Nullable)getFingerDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Performs Biometric authentication with Validation Gateway (VG) service
/// </summary>
/// <param name="requestId">Application random number</param>
/// <param name="fingerIndex">
/// Index of finger to be used for biometric authentication
/// </param>
/// <param name="sensorTimeout">
/// Timeout of capture for fingerprint sensor in number of seconds
/// </param>
/// <returns>
/// ToolkitResponse object which contains the biometric authentication status
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)authenticateBiometricOnServer:(NSString * _Nonnull)requestId fingerIndex:(enum FingerIndex)fingerIndex sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Resets the ID card PIN using the ICA Validation Gateway (VG) service
/// </summary>
/// <param name="encodedPin">
/// Emirates ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <param name="fingerData">
/// FingerData object referring to finger reference identifier and index values
/// </param>
/// <param name="sensorTimeout">
/// Timeout in number of seconds for sensor to capture the finger image
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)resetPin:(NSString * _Nonnull)encodedPin fingerData:(FingerData * _Nullable)fingerData sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Unblock the ID Card PIN, if the card is blocked after multiple unsuccessful PIN authentications
/// </summary>
/// <param name="encodedPin">
/// Emirates ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <param name="fingerData">
/// FingerData object referring to finger reference identifier and index values
/// </param>
/// <param name="sensorTimeout">
/// Timeout in number of seconds for sensor to capture the finger image
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)unblockPin:(NSString * _Nonnull)encodedPin fingerData:(FingerData * _Nullable)fingerData sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Read the family book data from the Emirates ID Card
/// </summary>
/// <param name="encodedPin">
/// ID Card PKI Pin which is encrypted and base64 encoded
/// </param>
/// <returns>
/// CardFamilyBookData object which contains the Family Book data fields
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardFamilyBookData * _Nullable)readFamilyBookData:(NSString * _Nonnull)encodedPin error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Verify digital signature of input data with the corresponding certificate
/// </summary>
/// <param name="input">
/// Data or hash corresponding to the digital signature to be verified
/// </param>
/// <param name="isInputHash">
/// true if input is hash data/false if input is plain data
/// </param>
/// <param name="signature">Buffer containing digital signature</param>
/// <param name="certificate">
/// Certificate data corresponding to the signature verification
/// </param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)verifySignature:(NSString * _Nonnull)input inputLength:(uint32_t)inputLength isInputHash:(BOOL)isInputHash signature:(uint8_t * _Null_unspecified)signature signatureLength:(uint32_t)signatureLength certificate:(uint8_t * _Null_unspecified)certificate certificateLength:(uint32_t)certificateLength error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Get the Card communication interface type
/// </summary>
/// <returns>Card communication interface type</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getInterfaceTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Validates Emirates ID card and performs biometric authentication with
/// Validation Gateway (VG) service against the captured finger image.
/// </summary>
/// <param name="requestId">Application random number</param>
/// <param name="fingerIndex">
/// Index of finger to be used for biometric authentication
/// </param>
/// <param name="sensorTimeout">
/// Timeout of capture for fingerprint sensor in number of seconds
/// </param>
/// <returns>
/// ToolkitResponse object which contains the biometric authentication status
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)authenticateCardAndBiometric:(NSString * _Nonnull)requestId fingerIndex:(enum FingerIndex)fingerIndex sensorTimeout:(int32_t)sensorTimeout error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Retrieve Elementary File data stored on the public areas of the ID card
/// </summary>
/// <param name="publicDataEFType">
/// Enumeration value corresponding to the Elementary File to be read
/// </param>
/// <param name="validateSignature">
/// A value of TRUE indicates that the application wants to validate the
/// digital signature of the read Elementary file, FALSE otherwise
/// </param>
/// <returns>
/// Elementary File Data as byte array
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)readPublicDataEF:(PUBLIC_DATA_EF_TYPE)publicDataEFType validateSignature:(int32_t)validateSignature error:(NSError * _Nullable * _Nullable)error;
- (uint8_t * _Null_unspecified)getreadPublicDataEFByte SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getreadPublicDataEFLength SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Retrieve the serial number of the Emirates ID Card
/// </summary>
/// <returns>
/// string which contains Emirates ID Card serial number
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getCSNAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Update container data to card
/// </summary>
/// <param name="fileType">
/// Type of file to update
/// </param>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (ToolkitResponse * _Nullable)updateData:(FILE_TYPE)fileType requestId:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Read container data from card
/// </summary>
/// <param name="fileType">
/// Type of file to update
/// </param>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// ToolkitResponse object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (DataContainer * _Nullable)readData:(FILE_TYPE)fileType requestId:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit5Child")
@interface Child : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)ChildElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getChildIdn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfBirth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherIdn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
@end

@class HealthDataContainer;

SWIFT_CLASS("_TtC13IDCardToolkit13DataContainer")
@interface DataContainer : ToolkitResponse
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (HealthDataContainer * _Nullable)getHealthDataContainer SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit17DataProtectionKey")
@interface DataProtectionKey : NSObject
- (nonnull instancetype)init:(uint8_t * _Nullable)publicKey keyLength:(uint32_t)keyLength modulus:(NSString * _Nonnull)modulus modulusLength:(uint32_t)modulusLength exponent:(NSString * _Nonnull)exponent exponentLength:(uint32_t)exponentLength OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getPublicKey SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getKeyLength SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getModulus SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getModulusLength SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getExponent SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getExponentLength SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit17DiagnosisResource")
@interface DiagnosisResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)diagnosisResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDiagnosisCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDiagnosisDescription SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDiagnosisRecordedDate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit10FingerData")
@interface FingerData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSInteger)fingerId fingerIndex:(NSInteger)fingerIndex OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)getFingerId SWIFT_WARN_UNUSED_RESULT;
- (enum FingerIndex)getFingerIndex SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, FingerIndex, closed) {
  FingerIndexNone = 0,
  FingerIndexNoMeaning = 3,
  FingerIndexRightThumb = 5,
  FingerIndexRightIndex = 9,
  FingerIndexRightMiddle = 13,
  FingerIndexRightRing = 17,
  FingerIndexRightLittle = 15,
  FingerIndexLeftThumb = 6,
  FingerIndexLeftIndex = 10,
  FingerIndexLeftMiddle = 14,
  FingerIndexLeftRing = 18,
  FingerIndexLeftLittle = 22,
};


SWIFT_CLASS("_TtC13IDCardToolkit12HeadOfFamily")
@interface HeadOfFamily : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)headOfFamily OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getHolderIdNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFamilyId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmirateNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmirateNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFirstNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFatherNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFatherNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGrandFatherNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGrandFatherNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTribeArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTribeEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getClanArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getClanEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfBirth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class InsuranceResource;

SWIFT_CLASS("_TtC13IDCardToolkit19HealthDataContainer")
@interface HealthDataContainer : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(id _Nonnull)healthData OBJC_DESIGNATED_INITIALIZER;
- (NSArray * _Nonnull)getAllergyResource SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getDiagnosisResource SWIFT_WARN_UNUSED_RESULT;
- (BloodGroupResource * _Nullable)getBloodGroupResource SWIFT_WARN_UNUSED_RESULT;
- (InsuranceResource * _Nullable)getInsuranceResource SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOrganDonor SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit11HomeAddress")
@interface HomeAddress : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)homeAddressDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getAddressTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLocationCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPobox SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFlatNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLandPhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMobilePhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmail SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit17InsuranceResource")
@interface InsuranceResource : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)insuranceResource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getResourceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceValidityStartDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getInsuranceValidityEndDate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit20ModifiablePublicData")
@interface ModifiablePublicData : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)modifiableDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getOccupationCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFamilyId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationTypeArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationTypeEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getOccupationFieldCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMaritalStatusCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getHusbandIdnNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getSponsorTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getSponsorUnifiedNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getSponsorName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResidencyTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResidencyNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getResidencyExpiryDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportCountryCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportCountryArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportCountryEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportIssueDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPassportExpiryDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQualificationLevelCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQualificationLevelArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQualificationLevelEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDegreeDescArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDegreeDescEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFieldOfStudyCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFieldOfStudyArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFieldOfStudyEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfStudyArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfStudyEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfGraduation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMotherFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit23NonModifiablePublicData")
@interface NonModifiablePublicData : ToolkitXmlDataObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)nonModifiableDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getIDType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIssueDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getExpiryDate SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTitleArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTitleEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDateOfBirth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPlaceOfBirthEnglish SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit22RegisterDeviceResponse")
@interface RegisterDeviceResponse : ToolkitResponse
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getDeviceRegistrationId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit17SignatureResponse")
@interface SignatureResponse : ToolkitResponse
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)xmlString OBJC_DESIGNATED_INITIALIZER;
- (uint8_t * _Null_unspecified)getSignature SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getSignatureLength SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit18SignatureValidator")
@interface SignatureValidator : NSObject
- (nullable instancetype)init:(uint8_t * _Null_unspecified)certificateData certificateDataLength:(uint32_t)certificateDataLength certificateChain:(uint8_t * _Null_unspecified)certificateChain certificateChainLength:(uint32_t)certificateChainLength error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)ValidateToolkitResponse:(NSString * _Nonnull)toolkitResponse error:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nonnull)getService SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAction SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRequest_id SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNonce SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCorrelation_id SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCsn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCardnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTime_stamp SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getValidity_interval SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13IDCardToolkit7Toolkit")
@interface Toolkit : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Toolkit constructor initializes the Toolkit context and prepares the SDK for use
/// </summary>
/// <param name="inProcessMode">
/// If this flag is true, the Toolkit will fulfill the API/Service
/// requests within the library itself.
/// If the flag is false then the Toolkit shared library in the
/// application process will forward the API/Service requests to
/// Toolkit Agent running in the same system where the application is running
/// </param>
/// <param name="configParams">
/// Application specific configuration parameters
/// </param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (nullable instancetype)init:(BOOL)inProcessMode configParams:(NSString * _Nonnull)configParams error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// <summary>
/// Get the version of ICA’s Toolkit being used
/// </summary>
/// <returns>
/// Toolkit version in the format of major.minor.patch version
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getToolkitVersionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Prepares Toolkit service request for RegisterDevice service
/// </summary>
/// <param name="requestId">
/// Application random number
/// </param>
/// <returns>
/// string which contains 8-byte request handle in base64 encoded format
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)prepareRequest:(NSString * _Nonnull)requestId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Registers a device with Validation Gateway(VG)
/// against the Service Provider(SP) license
/// </summary>
/// <param name="encodedUserId">
/// User ID of an authorized Service Provider (SP) encrypted and base64 encoded
/// </param>
/// <param name="encodedPassword">
/// Password for the userId encrypted and base64 encoded
/// </param>
/// <param name="deviceReferenceId">
/// Registration reference Identifier of the device to be registered with
/// validation gateway
/// </param>
/// <returns>
/// RegisterDeviceResponse object which
/// contains Device Registration Identifier of the registered device
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (RegisterDeviceResponse * _Nullable)registerDevice:(NSString * _Nonnull)encodedUserId encodedPassword:(NSString * _Nonnull)encodedPassword deviceReferenceId:(NSString * _Nonnull)deviceReferenceId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// List all compatible smart card readers connected to the system
/// </summary>
/// <returns>
/// Array of CardReader object of connected smartcard readers.
/// If no readers available, will return an empty array object
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSArray * _Nullable)listReadersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get the first reader with Emirates ID Card inserted
/// </summary>
/// <returns>
/// CardReader object of card reader with Emirates ID Card inserted
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (CardReader * _Nullable)getReaderWithEmiratesIdAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get the Device Identifier of the connected device to register with
/// Validation Gateway
/// </summary>
/// <returns>
/// string which contains Device Identifier
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getDeviceIdAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get the status message corresponsing to the Toolkit status code
/// </summary>
/// <param name="status">Toolkit status code</param>
/// <returns>Status message</returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getstatusMessage:(NSInteger)statusValue error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Free the memory buffer allocated
/// </summary>
/// <param name="buffer">Memory buffer to free</param>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)freeMemory:(void * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Release the resources and close the Toolkit context
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)cleanupAndReturnError:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// setNfc tags
/// </summary>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)setNfcTag:(id _Nullable)session tag:(id _Nullable)tag error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Get data protection key
/// </summary>
/// <returns>
/// Data protection key object which contains public key, modulus, exponent
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (DataProtectionKey * _Nullable)getDataProtectionKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Parse the provided MRZ (Machine Readable Zone) string and
/// retrieves the attributes corresponding to the MRZ data provided
/// </summary>
/// <param name="mrz">MRZ string to be parsed</param>
/// <returns>
/// MRZData structure object which contains parsed attributes.
/// Parsed MRZ attributes can be accessed through the MRZData structure object.
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)parseMRZData:(NSString * _Nonnull)mrz error:(NSError * _Nullable * _Nullable)error;
/// <summary>
/// Get the expiry date of the Toolkit SDK License issued to the service provider
/// </summary>
/// <returns>
/// string which contains expiry date of the Toolkit SDK License
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (NSString * _Nullable)getLicenseExpiryDateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzDocument_type SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzIssued_country SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzCardnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzIdnumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzDate_of_birth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzGender SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzCard_expiry_date SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzNationality SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMrzFullname SWIFT_WARN_UNUSED_RESULT;
/// <summary>
/// Get config certificate expiry date
/// </summary>
/// <returns>
/// Config Cert Expiry Date structure object which holds the
/// expiry dates of the service provider
/// </returns>
/// <exception cref="ToolkitException">
/// In case of error, the function throws ToolkitException
/// </exception>
- (BOOL)getConfigCertificateExpiryDateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nonnull)getConfig_vg_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getConfig_lv_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getServer_tls_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getConfig_ag_cert_expiry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLicense_expiry SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;

SWIFT_CLASS("_TtC13IDCardToolkit12ToolkitError")
@interface ToolkitError : NSError
+ (BOOL)errorWithDomainNameWithDomain:(NSString * _Nonnull)domain reason:(NSString * _Nonnull)reason code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithNameWithErrorName:(NSString * _Nonnull)errorName code:(NSInteger)code error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)foundexception:(NSError * _Nonnull)err error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorCode:(NSInteger)code error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode response:(NSString * _Nonnull)response error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode attemptsLeft:(int8_t)attemptsLeft error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)errorWithDomainCode:(NSInteger)errorCode attemptsLeft:(int8_t)attemptsLeft response:(NSString * _Nonnull)response error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC13IDCardToolkit4Wife")
@interface Wife : ToolkitXmlDataObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDictionary * _Nonnull)wifeData OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getWifeIdn SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getNationalityEnglish SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13IDCardToolkit11WorkAddress")
@interface WorkAddress : NSObject
- (nonnull instancetype)init:(NSDictionary * _Nonnull)workAddressDataElement OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getAddressTypeCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLocationCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCompanyNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmiratesEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getCityEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPoBox SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getStreetEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaCode SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAreaEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameArabic SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBuildingNameEnglish SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLandPhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getMobilePhoneNumber SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEmail SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
